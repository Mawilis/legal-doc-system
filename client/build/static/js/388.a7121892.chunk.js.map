{"version":3,"file":"static/js/388.a7121892.chunk.js","mappings":"+OAMA,MAAMA,EAAwBC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,yKASlCC,EAAkBJ,EAAAA,GAAOC,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,iIAQ5BG,EAAkBN,EAAAA,GAAOO,EAACC,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,wBAI1BM,EAAqBT,EAAAA,GAAOU,KAAIC,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,0FAOhCS,EAAQZ,EAAAA,GAAOa,MAAKC,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,8EAMpBY,EAAWf,EAAAA,GAAOgB,SAAQC,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,8EAM1Be,EAASlB,EAAAA,GAAOmB,OAAMC,IAAAA,GAAAjB,EAAAA,EAAAA,GAAA,2LAatBkB,EAAYrB,EAAAA,GAAOO,EAACe,IAAAA,GAAAnB,EAAAA,EAAAA,GAAA,gDAkG1B,EA7FqBoB,KACjB,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,KACtCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,MAC7BO,GAASC,EAAAA,EAAAA,IAAG,0BAElBC,EAAAA,EAAAA,YAAU,KACoBC,WACtB,IACI,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,qBACjCd,EAAgBY,EAASG,KAC7B,CAAE,MAAOC,GACLC,QAAQX,MAAM,+BAAgCU,GAC9CT,EAAS,8BACb,GAGJW,GAGAV,EAAOW,GAAG,qBAAsBC,IAC5BpB,GAAiBqB,GAAS,CAACD,KAAmBC,IAAM,IAGjD,KACHb,EAAOc,YAAY,IAExB,CAACd,IA4BJ,OACIe,EAAAA,EAAAA,MAACjD,EAAqB,CAAAkD,SAAA,EAClBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAEHlB,IAASmB,EAAAA,EAAAA,KAAC7B,EAAS,CAAA4B,SAAElB,IAEG,IAAxBP,EAAa2B,QACVD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,8BAEHzB,EAAa4B,KAAKC,IACdL,EAAAA,EAAAA,MAAC5C,EAAe,CAAA6C,SAAA,EACZC,EAAAA,EAAAA,KAAA,MAAAD,SAAKI,EAAYC,SACjBJ,EAAAA,EAAAA,KAAC5C,EAAe,CAAA2C,SAAEI,EAAYE,YAFZF,EAAYG,QAO1CR,EAAAA,EAAAA,MAACvC,EAAkB,CAACgD,SA3CCrB,UAEzB,GADAsB,EAAEC,kBACGhC,IAAaE,EAEd,YADAG,EAAS,kCAIb,MAAMa,EAAiB,CAAES,MAAO3B,EAAU4B,QAAS1B,GAEnD,UAEUS,EAAAA,EAAMsB,KAAK,oBAAqBf,GAGtCZ,EAAO4B,KAAK,oBAAqBhB,GAGjCjB,EAAY,IACZE,EAAc,IACdE,EAAS,KACb,CAAE,MAAOS,GACLC,QAAQX,MAAM,4BAA6BU,GAC3CT,EAAS,4BACb,GAoBuDiB,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBACJC,EAAAA,EAAAA,KAACtC,EAAK,CACFkD,KAAK,OACLC,YAAY,oBACZC,MAAOrC,EACPsC,SAAWP,GAAM9B,EAAY8B,EAAEQ,OAAOF,UAE1Cd,EAAAA,EAAAA,KAACnC,EAAQ,CACLoD,KAAK,IACLJ,YAAY,sBACZC,MAAOnC,EACPoC,SAAWP,GAAM5B,EAAc4B,EAAEQ,OAAOF,UAE5Cd,EAAAA,EAAAA,KAAChC,EAAM,CAAC4C,KAAK,SAAQb,SAAC,yBAEN,C","sources":["features/instructions/pages/Instructions.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport { io } from 'socket.io-client';\n\n// Styled Components for better UI\nconst InstructionsContainer = styled.div`\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  max-width: 800px;\n  margin: 20px auto;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n`;\n\nconst InstructionItem = styled.div`\n  background-color: #fff;\n  padding: 15px;\n  border-radius: 8px;\n  margin-bottom: 10px;\n  border: 1px solid #ddd;\n`;\n\nconst InstructionText = styled.p`\n  margin: 0;\n`;\n\nconst AddInstructionForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nconst Input = styled.input`\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n`;\n\nconst Textarea = styled.textarea`\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n`;\n\nconst Button = styled.button`\n  padding: 10px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\nconst ErrorText = styled.p`\n  color: red;\n  text-align: center;\n`;\n\nconst Instructions = () => {\n    const [instructions, setInstructions] = useState([]);\n    const [newTitle, setNewTitle] = useState('');\n    const [newContent, setNewContent] = useState('');\n    const [error, setError] = useState(null);\n    const socket = io('http://localhost:3001');  // Adjust to match your backend\n\n    useEffect(() => {\n        const fetchInstructions = async () => {\n            try {\n                const response = await axios.get('/api/instructions');\n                setInstructions(response.data);\n            } catch (err) {\n                console.error('Error fetching instructions:', err);\n                setError('Error fetching instructions');\n            }\n        };\n\n        fetchInstructions();\n\n        // Listen for real-time updates via Socket.io\n        socket.on('instruction-added', (newInstruction) => {\n            setInstructions((prev) => [newInstruction, ...prev]); // Add new instruction to the top of the list\n        });\n\n        return () => {\n            socket.disconnect();  // Clean up socket connection on component unmount\n        };\n    }, [socket]);\n\n    const handleAddInstruction = async (e) => {\n        e.preventDefault();\n        if (!newTitle || !newContent) {\n            setError('Title and content are required');\n            return;\n        }\n\n        const newInstruction = { title: newTitle, content: newContent };\n\n        try {\n            // Post the new instruction to the server\n            await axios.post('/api/instructions', newInstruction);\n\n            // Emit event to notify others about the new instruction\n            socket.emit('instruction-added', newInstruction);\n\n            // Clear form inputs\n            setNewTitle('');\n            setNewContent('');\n            setError(null);  // Clear any previous errors\n        } catch (err) {\n            console.error('Error adding instruction:', err);\n            setError('Failed to add instruction');\n        }\n    };\n\n    return (\n        <InstructionsContainer>\n            <h2>Instructions</h2>\n\n            {error && <ErrorText>{error}</ErrorText>}\n\n            {instructions.length === 0 ? (\n                <p>No instructions available</p>\n            ) : (\n                instructions.map((instruction) => (\n                    <InstructionItem key={instruction._id}>\n                        <h3>{instruction.title}</h3>\n                        <InstructionText>{instruction.content}</InstructionText>\n                    </InstructionItem>\n                ))\n            )}\n\n            <AddInstructionForm onSubmit={handleAddInstruction}>\n                <h3>Add New Instruction</h3>\n                <Input\n                    type=\"text\"\n                    placeholder=\"Instruction Title\"\n                    value={newTitle}\n                    onChange={(e) => setNewTitle(e.target.value)}\n                />\n                <Textarea\n                    rows=\"5\"\n                    placeholder=\"Instruction Content\"\n                    value={newContent}\n                    onChange={(e) => setNewContent(e.target.value)}\n                />\n                <Button type=\"submit\">Add Instruction</Button>\n            </AddInstructionForm>\n        </InstructionsContainer>\n    );\n};\n\nexport default Instructions;\n"],"names":["InstructionsContainer","styled","div","_templateObject","_taggedTemplateLiteral","InstructionItem","_templateObject2","InstructionText","p","_templateObject3","AddInstructionForm","form","_templateObject4","Input","input","_templateObject5","Textarea","textarea","_templateObject6","Button","button","_templateObject7","ErrorText","_templateObject8","Instructions","instructions","setInstructions","useState","newTitle","setNewTitle","newContent","setNewContent","error","setError","socket","io","useEffect","async","response","axios","get","data","err","console","fetchInstructions","on","newInstruction","prev","disconnect","_jsxs","children","_jsx","length","map","instruction","title","content","_id","onSubmit","e","preventDefault","post","emit","type","placeholder","value","onChange","target","rows"],"sourceRoot":""}