openapi: 3.0.0
info:
  title: Legal Document System API
  version: 1.0.0
  description: |
    API covering authentication, document management, roles, templates, comments, and more.

servers:
  - url: http://localhost:3001

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterUser:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string, example: John Doe }
        email: { type: string, format: email, example: john@example.com }
        password: { type: string, format: password, minLength: 6, example: password123 }

    LoginUser:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: john@example.com }
        password: { type: string, format: password, example: password123 }

    Document:
      type: object
      required: [title, caseNumber, status]
      properties:
        title: { type: string, example: Service Agreement }
        caseNumber: { type: string, example: CASE-2024-001 }
        status: { type: string, example: Draft }

    Comment:
      type: object
      required: [content]
      properties:
        content: { type: string, example: This is a sample comment. }

paths:
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/RegisterUser' }
      responses:
        '201':
          description: User registered successfully.
        '422':
          description: Validation error.

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login and get token
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginUser' }
      responses:
        '200':
          description: Token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR...

  /api/documents:
    get:
      tags: [Documents]
      summary: List all documents
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: List of documents
    post:
      tags: [Documents]
      summary: Create a new document
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Document' }
      responses:
        '201':
          description: Document created

  /api/documents/{id}:
    get:
      tags: [Documents]
      summary: Get document by ID
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Document data
        '404':
          description: Not found
    put:
      tags: [Documents]
      summary: Update a document
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Document' }
      responses:
        '200':
          description: Updated successfully

  /api/comments:
    post:
      tags: [Comments]
      summary: Add a comment to a document
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Comment' }
      responses:
        '201':
          description: Comment created

  /api/comments/document/{documentId}:
    get:
      tags: [Comments]
      summary: Get comments for a document
      security: [ { bearerAuth: [] } ]
      parameters:
        - name: documentId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of comments

  /api/roles:
    get:
      tags: [Roles]
      summary: List all roles
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Roles list
    post:
      tags: [Roles]
      summary: Create a role
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, example: MANAGER }
                permissions:
                  type: array
                  items: { type: string }
      responses:
        '201':
          description: Role created
